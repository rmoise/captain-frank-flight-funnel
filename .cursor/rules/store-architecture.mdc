# Store Architecture

The application uses Zustand for state management with a carefully structured store architecture. The main store is composed of multiple slices with clear separation of concerns.

## Core Structure

The main store implementation is in [src/store/index.ts](mdc:src/store/index.ts) with types defined in [src/store/types.ts](mdc:src/store/types.ts).

### Key Components:

1. **Core State** (Shared across all phases)
   - Current phase tracking
   - Language settings
   - Initialization status
   - Navigation state

2. **Phases 1-3** (Linked funnel phases)
   - Flight data management
   - Validation state
   - Wizard progression
   - User details

3. **Phase 4** (Independent phase)
   - Separate flight data store
   - Document management
   - Compensation calculations
   - Independent validation

## Store Organization

```
src/store/
  ├── index.ts              # Main store composition (should be store.ts, but index.ts is current reality)
  ├── types.ts              # Core store types
  └── slices/
      ├── core/            # Core state management
      ├── phases/          # Phases 1-3 state
      └── phase4/          # Independent Phase 4 state
```

## Important Implementation Notes:
- Phase 4 must maintain complete independence from Phases 1-3
- Use slices pattern for modular state management
- Maintain type safety across all store interactions
- Follow one-way data flow patterns
